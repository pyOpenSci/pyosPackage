# pre-commit (https://pre-commit.com/) is a tool that runs source code checks
# such as linting, formatting, and code style.

# CI
# pyosMeta uses pre-commit with the precommit.ci bot to check pull requests.
# Configuration reference doc: https://pre-commit.com/#pre-commit-configyaml---top-level

# Developers
# You may want to install pre-commit to run locally on each minimum_pre_commit_version
# See https://pre-commit.com/#install
# To set up pre-commit hooks: pre-commit install
# To run on all files: pre-commit run --all-files

ci:
  # pyosMeta disables autofixing of PRs to simplify new contributor experience and cleaner git history
  autofix_prs: false
  # Frequency of hook updates
  autoupdate_schedule: weekly

repos:
  # Out of the box hooks for pre-commit https://github.com/pre-commit/pre-commit-hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      # Makes sure files end in a newline and only a newline.
      - id: end-of-file-fixer
      # Check for files with names that would conflict on a case-insensitive filesystem like MacOS HFS+ or Windows FAT.
      - id: check-case-conflict
      # Remove trailing whitespace on code lines
      - id: trailing-whitespace

  # Spelling hook
  - repo: https://github.com/codespell-project/codespell
    rev: v2.3.0
    hooks:
      - id: codespell
        additional_dependencies:
          - tomli

    # Lint code using ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.3.5
    hooks:
    - id: ruff
      args: [--fix, --exit-non-zero-on-fix]
    # Ruff can be used as a code formatter replacing black
    # It can also replace isort
    - id: ruff-format
      args: ["--line-length", "79"]
